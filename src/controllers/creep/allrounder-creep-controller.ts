import { RoomMemoryManager } from "../../memory/room-memory-manager";
import { CreepTasks } from "../../enums/creep-tasks";
import { CreepController } from "./base/creep-controller";
import { MinerModule } from "./modules/miner-module";
import { EnergyTransferModule } from "./modules/energy-transfer-module";
import { BuildModule } from "./modules/build-module";
import { UpgradeModule } from "./modules/upgrade-module";
import { CustomActionResponse } from "../../enums/custom-action-response";
import { EnergyFillingModule } from "./modules/energy-filling-module";

/** Controls the allrounder creep, the creep generated by the room only at lower levels */
export class AllRounderCreepController extends CreepController {
    /** Stores whether the allrounder has been spawned to recover a room, if so don't focus on building */
    private readonly _isAdvancedLevel: boolean;
    protected readonly modules: {
        mine: MinerModule,
        transfer: EnergyTransferModule,
        build: BuildModule,
        upgrade: UpgradeModule,
        fill: EnergyFillingModule
    };

    constructor(roomState: RoomMemoryManager, creep: Creep, isAdvancedLevel: boolean = false) {
        super(roomState, creep);
        this.modules = {
            mine: new MinerModule(creep, this),
            transfer: new EnergyTransferModule(creep, this),
            build: new BuildModule(creep, this),
            upgrade: new UpgradeModule(creep, this),
            fill: new EnergyFillingModule(creep, this)
        };
        this._isAdvancedLevel = isAdvancedLevel;
    }

    /**
     * Orders the allrounder creep to perform actions in this order of importance:
     * Build Structures, Fill Spawn, Upgrade, Collect Energy, Mine Energy
     */
    public control() {
        switch (this.memory.currentTask) {
            case CreepTasks.collectingEnergy: // Continue collecting / travelling to container
                this.modules.transfer.retrieveEnergy();
                break;
            case CreepTasks.mining: // Continue collecting / travelling to container
                this.modules.mine.mineForEnergy();
                break;
            case CreepTasks.building: // Continue building / travelling to build site
                this.modules.build.buildConstructionSite();
                break;
            case CreepTasks.fillingSpawns: // Continue filling / travelling to spawns / extensions
                this.modules.fill.fillClosest();
                break;
            case CreepTasks.upgrading: // Continue upgrading / travelling to controller
                this.modules.upgrade.upgradeController();
                break;
            default:
                this.getNewTaskForCreep();
                break;
        }
    }

    /**
     * Called when a cree is full of energy and needs something do do with it.
     */
    protected getNewTaskForCreep() {
        if (this._isAdvancedLevel) {
            this.getNewHighLevelTaskForCreep();
        } else {
            this.getNewLowLevelTaskForCreep();
        }
    }

    /**
     * Only called on rooms that are just being started up.
     * Creep prioritises building new structures over filling spawn
     */
    protected getNewLowLevelTaskForCreep() {
        if (super.creepIsFull()) {
            if (this.modules.build.roomHasConstructionSites()) {
                // Try building
                super.setTask(CreepTasks.building);
                this.modules.build.buildConstructionSite();
            } else {
                // Try filling spawn energy
                const response = this.modules.fill.fillClosest();

                if (response !== CustomActionResponse.ok) {
                    // Upgrade instead
                    super.setTask(CreepTasks.upgrading);
                    this.modules.upgrade.upgradeController();
                }
            }
        } else {
            // Retrieve energy from the closest storage
            super.setTask(CreepTasks.collectingEnergy);
            const retrieveSucceeded = (this.modules.transfer.retrieveEnergy() === CustomActionResponse.ok);

            if (!retrieveSucceeded) {
                // Mine for more energy
                super.setTask(CreepTasks.mining);
                this.modules.mine.mineForEnergy();
            }
        }
    }

    /** Called when an allround creep is in an already established rooms, focuses more on spawning higher level creeps first */
    protected getNewHighLevelTaskForCreep() {
        if (super.creepIsFull()) {
            // Try filling spawn energy
            const response = this.modules.fill.fillClosest();

            if (response !== CustomActionResponse.ok) {
                // Try building instead
                super.setTask(CreepTasks.building);
                this.modules.build.buildConstructionSite();
            }
        } else {
            // Retrieve energy from the closest storage
            super.setTask(CreepTasks.collectingEnergy);
            const retrieveSucceeded = (this.modules.transfer.retrieveEnergy() === CustomActionResponse.ok);

            if (!retrieveSucceeded) {
                // Mine for more energy
                this._creep.say("Force to Mine");
                super.setTask(CreepTasks.mining);
                this.modules.mine.mineForEnergy();
            }
        }
    }
}
