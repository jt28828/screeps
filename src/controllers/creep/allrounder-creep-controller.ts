import { RoomMemoryManager } from "../../memory/room-memory-manager";
import { IController } from "../../models/interfaces/controller";
import { CreepTasks } from "../../enums/creep-tasks";
import { CreepController } from "./base/creep-controller";
import { MinerModule } from "./modules/miner-module";
import { EnergyTransferModule } from "./modules/energy-transfer-module";
import { BuildModule } from "./modules/build-module";
import { UpgradeModule } from "./modules/upgrade-module";

/** Controls the allrounder creep, the creep generated by the room only at lower levels */
export class AllRounderCreepController extends CreepController<AllRounderCreep> implements IController {
    protected modules: { mine: MinerModule, transfer: EnergyTransferModule, build: BuildModule, upgrade: UpgradeModule };

    constructor(roomState: RoomMemoryManager, creep: AllRounderCreep) {
        super(roomState, creep);
        this.modules = {
            mine: new MinerModule(creep, this),
            transfer: new EnergyTransferModule(creep, this),
            build: new BuildModule(creep, this),
            upgrade: new UpgradeModule(creep, this)
        }
    }

    /**
     * Orders the allrounder creep to perform actions in this order of importance:
     * Build Structures, Upgrade, Collect Energy, Mine Energy
     */
    public control() {
        if (this.memory.currentTask === CreepTasks.building) {
            // Continue building / travelling to build site
            this.modules.build.buildConstructionSite();
        } else if (this.memory.currentTask === CreepTasks.upgrading) {
            // Continue upgrading / travelling to controller
        }

        if (this.creepIsFull()) {
            if (this.modules.build.roomHasConstructionSites()) {
                // Try building
                super.memory.currentTask = CreepTasks.building;
                this.modules.build.buildConstructionSite();
            } else {
                // Upgrade instead
                super.memory.currentTask = CreepTasks.upgrading;
                this.modules.upgrade.upgradeController();
            }
            // Deposit energy in the closest storage
            this.modules.transfer.depositEnergy()
        } else {
            // Mine for more energy
            this.modules.mine.mineForEnergy();
        }
    }

}
